import requests
import datetime
import random
import argparse
import parser.deputies as pd

from jinja2 import Environment, PackageLoader, select_autoescape

env = Environment(loader=PackageLoader('diputadodeldia'),
                  autoescape=select_autoescape(['html', 'xml']))


class Generator:

    @staticmethod
    def get_index(seed_value):
        """
        Get a random number in the range of the deputies list length using as seed the value delivered by the beacon.
        :return: An integer in the range of the list described.
        """
        max_index = pd.Parser('').count_deputies() - 1
        random.seed(bytes.fromhex(seed_value))

        return random.randint(0, max_index)

    @staticmethod
    def format_date(value):
        if value < 10:
            return '0' + str(value)
        else:
            return str(value)

    def date_html_name(self, d):
        return str(d.year) + self.format_date(d.month) + self.format_date(d.day) + '.html'

    def run(self, date_arg=""):
        if date_arg:
            # pulse of a certain date at 00:01
            year = date_arg[0:4]
            month = date_arg[4:6]
            day = date_arg[6:]
            date = datetime.datetime(year=int(year), month=int(month), day=int(day), hour=0, minute=1).astimezone(
                tz=datetime.timezone.utc)
            date_ts = int(date.timestamp() * 1000)
            url = 'https://beacon.clcert.cl/beacon/2.0/pulse/time/' + str(date_ts)
        else:
            # using last pulse generated by the beacon
            url = 'https://beacon.clcert.cl/beacon/2.0/pulse/last'

        page = requests.get(url)
        output_value = page.json()['pulse']['outputValue']
        record_id = page.json()['pulse']['pulseIndex']

        date = datetime.datetime.strptime(page.json()['pulse']['timeStamp'], '%Y-%m-%dT%H:%M:%S.%fZ').replace(
               tzinfo=datetime.timezone.utc)
        delta = datetime.timedelta(days=1)
        previous = date - delta
        next = date + delta

        index = self.get_index(output_value)

        parser = pd.Parser(date)
        deputy = parser.get_deputy(index)

        template = env.get_template('index_template.html')
        curr_html_name = self.date_html_name(date)
        prev_html_name = self.date_html_name(previous)
        post_html_name = self.date_html_name(next)

        with open('public/' + curr_html_name, 'w') as html_file:
            html_file.write(template.render(**deputy, date=date, record=record_id, prev=prev_html_name,
                                            post=post_html_name))
            html_file.close()

        with open('public/index.html', 'w') as html_file:
            html_file.write(template.render(**deputy, date=date, record=record_id, prev=prev_html_name,
                                            post='#'))
            html_file.close()


parser = argparse.ArgumentParser(description="#DiputadoDelDia - Random UChile")
parser.add_argument("--date", action="store", dest="date", default="", type=str)
options = parser.parse_args()

Generator().run(options.date)
